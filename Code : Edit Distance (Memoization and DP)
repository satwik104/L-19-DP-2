int editDistance_mem(string s1,string s2,int **output)
{
    int m = s1.size();
    int n = s2.size();
    //base case
    if(m==0 || n==0)
        return max(m,n);
    //check if already exist
    if(output[m][n]!=-1)
        return output[m][n];
    
    //recursive calls
    int ans;
    if(s1[0] == s2[0])
        ans = editDistance_mem(s1.substr(1),s2.substr(1),output);
    else
    {
       //operations
    //insert
    int a = editDistance_mem(s1.substr(1),s2,output);
    //delete
    int b = editDistance_mem(s1,s2.substr(1),output);
    //replace
    int c = editDistance_mem(s1.substr(1),s2.substr(1),output);
    
    ans = min(a,min(b,c)) + 1; 
    }
    //save ans
    output[m][n] = ans;
    return ans;
}
int editDistance(string s1, string s2)
{
	int m = s1.size();
    int n = s2.size();
    
    int **output = new int*[m+1];
    for(int i=0; i<=m; i++)
    {
        output[i] = new int[n+1];
        for(int j=0; j<=n; j++)
            output[i][j]=-1;
    }
        
    return editDistance_mem(s1,s2,output);
}
